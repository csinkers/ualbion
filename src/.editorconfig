root = true

[*.cs]

# IDE0040: Add accessibility modifiers
dotnet_style_require_accessibility_modifiers = never:silent

dotnet_code_quality.ca1711.allowed_suffixes = Flag|Flags

# CA1303: Do not pass literals as localized parameters
# Most string literals aren't shown to the users, any user-visible text
# will go through the whole TextFormatter flow and be localised appropriately.
dotnet_diagnostic.CA1303.severity = none

# CA1707: Identifiers should not contain underscores
# Analysers aren't familiar with the new discard notation consisting of a single underscore.
dotnet_diagnostic.CA1707.severity = none

# CA1819: Properties should not return arrays
# Arrays have the best performance and returning them directly avoids excessive copying.
# It is the responsibility of calling code to not modify any arrays it doesn't own.
dotnet_diagnostic.CA1819.severity = none

# CA1028:Enum Storage should be Int32
# Many of the enums need to exactly correspond to the existing on-disk formats, making them ints
# complicates type casting in the serialisation code.
dotnet_diagnostic.CA1028.severity = none

# CA1014: Mark assemblies with CLSCompliant
# Don't really care about interoperability with other .NET languages in this project.
dotnet_diagnostic.CA1014.severity = none

# CA1021: Avoid 'out' parameters as they are not designed for general audience
# In a gamedev context, handling errors via exceptions can be disastrous for performance.
# Much better to use the TryXXX(..., out result) pattern.
dotnet_diagnostic.CA1021.severity = none

# CA1002: Do not expose generic lists
# In a gamedev context accessing concrete types rather than interfaces
# can make an appreciable perf difference. Also, IList<T> doesn't derive
# from IReadOnlyList<T>, so some very annoying casting can be required.
dotnet_diagnostic.CA1002.severity = none

# CA1305: String behaviour can vary based on CurrentCulture.
# The culture in UAlbion is set to InvariantCulture on startup and should always
# remain so. Any culture-specific formatting must be done with an explicit
# culture.
dotnet_diagnostic.CA1305.severity = none

# CA1003: Use EventHandler types for events
# In many situations we don't need the sender, and allocating
# an EventArgs object just to raise an event can be wasteful.
dotnet_diagnostic.CA1003.severity = none

# CA1008: Enum values 0 should be named None
# Many of the enums in UAlbion.Formats need to match conventions in the original game
dotnet_diagnostic.CA1008.severity = none

# CA2227: Change collection to be read-only by removing the property setter
# Would interfere with JSON deserialisation in many cases.
dotnet_diagnostic.CA2227.severity = none

# CA1045: Consider a design that does not require that '...' be a reference parameter
# In a game the performance gain of using ref can be worth the additional cognitive load.
dotnet_diagnostic.CA1045.severity = none

# CA1034: Do not nest type '...'. Alternatively, change its accessibility so that it is not externally visible.
# Stylistic choice - nested types should not be widely used, but for things like organising Vars they can work well.
dotnet_diagnostic.CA1034.severity = none

# CA5394: Random is an insecure random number generator. Use cryptographically secure random number generators when randomness is required for security.
# There is no security-sensitive code in this project.
dotnet_diagnostic.CA5394.severity = none

# IDE0007: Use implicit type
# Disabled these, not interested in being dogmatic about var usage.
dotnet_diagnostic.IDE0007.severity = none

# IDE0008: Use explicit type
dotnet_diagnostic.IDE0008.severity = none

csharp_using_directive_placement = outside_namespace:silent
csharp_prefer_simple_using_statement = true:suggestion
csharp_prefer_braces = when_multiline:silent
csharp_style_namespace_declarations = file_scoped:silent
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent
csharp_style_prefer_primary_constructors = true:suggestion
csharp_prefer_system_threading_lock = true:suggestion
csharp_style_expression_bodied_methods = when_on_single_line:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_throw_expression = true:suggestion
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:silent
csharp_indent_labels = one_less_than_current
csharp_space_around_binary_operators = before_and_after

[*.{cs,vb}]
#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

# Naming styles

dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = false:silent
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion
dotnet_style_namespace_match_folder = true:suggestion
dotnet_style_operator_placement_when_wrapping = beginning_of_line
