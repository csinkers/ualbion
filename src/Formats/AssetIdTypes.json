{
  "Mappings": {
    "SpriteId": [
      "AutomapGfx",
      "BackgroundGfx",
      "CombatBackground",
      "CombatGfx",
      "CoreGfx",
      "Floor",
      "FontGfx",
      "ItemGfx",
      "MonsterGfx",
      "NpcLargeGfx",
      "NpcSmallGfx",
      "Object3D", // Note: these might end up being meshes! They should be loaded via IAssetManager.LoadMapObject and only treated as sprites if an ITexture was returned.
      "PartyLargeGfx",
      "PartySmallGfx",
      "PartyInventoryGfx",
      "Picture",
      "Portrait",
      "Slab",
      "TacticalGfx",
      "TilesetGfx",
      "Wall",
      "WallOverlay"
    ],

    "InkId": [ "Ink" ],
    "FontId": [ "FontDefinition" ],
    "TilesetGfxId": [ "TilesetGfx" ],
    "PictureId": [ "Picture" ],
    "PortraitId": [ "Portrait" ],
    "MapObjectId":  [ "Object3D" ],

    "SheetId": [
      "MonsterSheet",
      "NpcSheet",
      "PartySheet"
    ],
    "MonsterId": [ "MonsterSheet" ],
    "NpcSheetId": [ "NpcSheet" ],
    "PartyMemberId": [ "PartyMember" ],
    "TargetId": [
      "Target",
      "PartyMember",
      "NpcSheet"
    ],

    "ItemId": [
      "Item",
      "Gold",
      "Rations"
    ],
    "SpecialId":  [ "Special" ],

    "AutomapId": [ "Automap" ],
    "BlockListId": [ "BlockList" ],
    "ChestId": [ "Chest" ],
    "DoorId": [ "Door" ],
    "EventSetId": [ "EventSet" ],
    "LabyrinthId": [ "Labyrinth" ],
    "MapId": [ "Map" ],
    "MerchantId": [ "Merchant" ],
    "MonsterGroupId": [ "MonsterGroup" ],
    "PaletteId": [ "Palette" ],
    "SampleId": [ "Sample" ],
    "ScriptId": [ "Script" ],
    "SongId": [ "Song" ],
    "SpellId": [ "Spell" ],
    "SwitchId": [ "Switch" ],
    "TickerId": [ "Ticker" ],
    "TilesetId": [ "Tileset" ],
    "VideoId": [ "Video" ],
    "WaveLibraryId": [ "WaveLibrary" ],

    "WordId": [ "Word" ],

    "StringSetId": [
      "EventText",
      "MapText",
      "Special"
    ],

    "TextId": [
      "ItemName",
      "Text",
      "Word"
    ]
  },
  "Extras": {
    "EventSetId": [ "    public readonly StringSetId ToEventText() => new StringSetId(AssetType.EventText, Id);" ],
    "MapId": [ "    public readonly StringSetId ToMapText() => new StringSetId(AssetType.MapText, Id);" ],
    "ItemId": [ "    public readonly TextId ToName() => new TextId(AssetType.ItemName, Id);" ],
    "TilesetId": [
      "    public readonly BlockListId ToBlockList() => new BlockListId(AssetType.BlockList, Id);",
      "    public readonly TilesetGfxId ToTilesetGfx() => new TilesetGfxId(AssetType.TilesetGfx, Id);"
    ],
    "BlockListId": [ "    public readonly TilesetId ToTileset() => new TilesetId(AssetType.Tileset, Id);" ],
    "PartyMemberId": [
      "    public readonly SheetId ToSheet() => new SheetId(AssetType.PartySheet, Id);",
      "    public readonly SpriteId ToSmallGfx() => new SpriteId(AssetType.PartySmallGfx, Id);",
      "    public readonly SpriteId ToLargeGfx() => new SpriteId(AssetType.PartyLargeGfx, Id);",
      "    public readonly SpriteId ToInventoryGfx() => new SpriteId(AssetType.PartyInventoryGfx, Id);"
    ]
  }
}
