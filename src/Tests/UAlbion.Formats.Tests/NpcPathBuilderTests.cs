using System.Linq;
using UAlbion.Formats.Assets.Maps;
using UAlbion.Formats.Exporters.Tiled;
using Xunit;

namespace UAlbion.Formats.Tests;

public class NpcPathBuilderTests
{
    static readonly NpcWaypoint[] TestWaypoints1 = ToWaypoints([
        (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),



        (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 29),  (60, 30),  (60, 31),  (60, 32),  (60, 33),  (61, 33),  (62, 33),  (63, 33),  (64, 33),
        (64, 32),  (65, 32),  (66, 32),  (66, 31),  (66, 30),  (66, 29),  (66, 28),  (66, 27),  (66, 26),  (67, 26),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 26),  (68, 26),  (68, 27),  (69, 27),  (70, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (70, 27),  (69, 27),  (68, 27),  (67, 27),  (67, 28),  (67, 29),  (67, 30),  (67, 31),  (67, 32),  (66, 32),  (65, 32),
        (64, 32),  (63, 32),  (62, 32),  (62, 33),  (62, 34),  (62, 35),  (62, 36),  (62, 37),  (62, 38),  (62, 39),  (62, 40),  (62, 41),  (61, 41),  (60, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (58, 41),  (57, 41),  (56, 41),  (55, 41),  (54, 41),  (54, 42),  (54, 43),  (54, 44),  (54, 45),  (54, 46),  (55, 46),  (56, 46),  (57, 46),  (57, 47),  (58, 47),  (59, 47),  (60, 47),  (61, 47),  (62, 47),  (63, 47),  (64, 47),  (65, 47),  (66, 47),
        (67, 47),  (68, 47),  (69, 47),  (70, 47),  (70, 46),  (70, 45),  (70, 44),  (71, 44),  (72, 44),  (73, 44),  (74, 44),  (75, 44),  (76, 44),  (77, 44),  (77, 43),  (77, 42),  (77, 41),  (77, 40),  (78, 40),  (79, 40),  (80, 40),  (81, 40),  (82, 40),  (83, 40),  (84, 40),  (85, 40),  (86, 40),  (87, 40),  (88, 40),  (88, 39),  (89, 39),  (90, 39),  (91, 39),  (92, 39),  (93, 39),  (94, 39),  (95, 39),  (95, 40),  (95, 41),  (96, 41),  (97, 41),  (98, 41),  (99, 41),  (100, 41), (101, 41), (101, 42), (101, 43), (102, 43),
        (103, 43), (104, 43), (105, 43), (106, 43), (107, 43), (108, 43), (109, 43), (109, 42), (109, 41), (109, 40), (109, 39), (109, 38), (109, 37), (109, 36), (109, 35), (110, 35), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 35), (109, 35), (108, 35), (108, 34), (108, 33), (108, 32), (108, 31), (108, 30), (107, 30), (107, 29), (107, 28), (106, 28), (105, 28), (104, 28), (104, 27), (104, 26), (104, 25), (104, 24), (104, 23), (104, 22), (104, 21),
        (104, 20), (104, 19), (105, 19), (106, 19), (107, 19), (108, 19), (109, 19), (110, 19), (111, 19), (112, 19), (113, 19), (114, 19), (114, 20), (114, 21), (114, 22), (114, 23), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 23), (114, 22), (114, 21), (114, 20), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (113, 19), (112, 19), (111, 19), (110, 19), (109, 19), (108, 19),
        (107, 19), (106, 19), (106, 20), (106, 21), (105, 21), (104, 21), (104, 22), (104, 23), (104, 24), (104, 25), (104, 26), (104, 27), (104, 28), (104, 29), (104, 30), (105, 30), (106, 30), (106, 31), (106, 32), (105, 32), (104, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (104, 32), (105, 32), (106, 32), (106, 33), (106, 34), (107, 34), (108, 34), (108, 35), (108, 36), (108, 37), (108, 38), (109, 38), (109, 39), (109, 40), (109, 41), (109, 42),
        (109, 43), (109, 44), (109, 45), (110, 45), (111, 45), (112, 45), (113, 45), (114, 45), (115, 45), (116, 45), (117, 45), (118, 45), (119, 45), (120, 45), (120, 46), (120, 47), (121, 47), (122, 47), (123, 47), (124, 47), (125, 47), (126, 47), (127, 47), (128, 47), (129, 47), (130, 47), (130, 48), (130, 49), (130, 50), (130, 51), (130, 52), (131, 52), (132, 52), (132, 53), (132, 54), (132, 55), (132, 56), (132, 57), (132, 58), (132, 59), (132, 60), (133, 60), (134, 60), (135, 60), (136, 60), (137, 60), (138, 60), (139, 60),
        (140, 60), (140, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (140, 61), (139, 61), (138, 61), (138, 62), (138, 63), (138, 64), (138, 65), (138, 66), (139, 66), (140, 66), (141, 66), (142, 66), (143, 66), (143, 67), (143, 67), (143, 67), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (142, 66), (141, 66), (140, 66), (139, 66), (138, 66), (137, 66), (136, 66), (136, 65),
        (136, 64), (136, 63), (136, 62), (136, 61), (136, 60), (136, 59), (136, 58), (136, 57), (135, 57), (134, 57), (134, 56), (134, 55), (134, 54), (134, 53), (134, 52), (134, 51), (134, 50), (133, 50), (132, 50), (131, 50), (130, 50), (130, 49), (130, 48), (130, 47), (129, 47), (128, 47), (127, 47), (127, 48), (126, 48), (125, 48), (124, 48), (123, 48), (122, 48), (121, 48), (120, 48), (119, 48), (119, 47), (118, 47), (117, 47), (116, 47), (115, 47), (114, 47), (113, 47), (112, 47), (112, 48), (112, 49), (112, 50), (112, 51),
        (112, 52), (111, 52), (110, 52), (110, 53), (110, 54), (110, 55), (110, 56), (110, 57), (110, 58), (110, 59), (110, 60), (111, 60), (112, 60), (113, 60), (114, 60), (115, 60), (115, 61), (115, 62), (116, 62), (117, 62), (118, 62), (119, 62), (120, 62), (120, 63), (120, 63), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (119, 62), (118, 62), (117, 62), (116, 62), (115, 62), (115, 61), (116, 61), (117, 61), (118, 61), (118, 61), (118, 61), (118, 61),
        (118, 61), (118, 61), (118, 61), (118, 61), (118, 61), (118, 61), (118, 61), (117, 61), (116, 61), (115, 61), (114, 61), (113, 61), (112, 61), (111, 61), (110, 61), (109, 61), (109, 62), (109, 63), (109, 64), (109, 65), (108, 65), (107, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 66), (106, 67), (106, 68), (106, 69), (105, 69), (104, 69), (103, 69), (102, 69), (101, 69), (100, 69), (100, 68), (100, 67), (100, 66), (100, 65), (100, 64),
        (100, 63), (101, 63), (102, 63), (103, 63), (104, 63), (104, 62), (104, 61), (104, 60), (104, 59), (103, 59), (103, 58), (103, 57), (103, 56), (102, 56), (101, 56), (100, 56), (101, 56), (102, 56), (103, 56), (103, 57), (103, 58), (103, 59), (104, 59), (105, 59), (106, 59), (107, 59), (108, 59), (108, 58), (108, 57), (109, 57), (109, 56), (109, 55), (109, 54), (109, 53), (109, 52), (109, 51), (109, 50), (109, 49), (109, 48), (109, 47), (109, 47), (109, 46), (109, 45), (109, 44), (110, 44), (110, 43), (110, 42), (110, 41),
        (110, 40), (110, 39), (110, 38), (110, 37), (110, 36), (110, 35), (109, 35), (108, 35), (108, 34), (108, 33), (108, 32), (108, 31), (109, 31), (110, 31), (110, 30), (111, 30), (112, 30), (113, 30), (113, 29), (113, 28), (113, 27), (112, 27), (111, 27), (111, 26), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 24), (111, 23), (111, 22), (111, 21), (111, 20), (111, 19), (112, 19), (113, 19), (114, 19), (115, 19), (116, 19), (117, 19),
        (118, 19), (119, 19), (120, 19), (120, 19), (120, 19), (121, 19), (122, 19), (122, 19), (122, 19), (122, 20), (122, 21), (122, 22), (122, 23), (122, 24), (122, 25), (122, 26), (122, 27), (122, 28), (122, 29), (123, 29), (124, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (126, 29), (127, 29), (127, 30), (127, 31), (127, 32), (127, 33), (127, 33), (127, 33), (127, 32), (127, 31), (126, 31), (125, 31), (124, 31), (124, 30),
        (123, 30), (122, 30), (121, 30), (120, 30), (119, 30), (118, 30), (117, 30), (117, 31), (117, 32), (117, 33), (117, 34), (117, 35), (117, 36), (117, 37), (117, 38), (117, 39), (116, 39), (115, 39), (114, 39), (113, 39), (112, 39), (111, 39), (110, 39), (110, 40), (110, 41), (110, 42), (110, 43), (110, 44), (110, 45), (109, 45), (108, 45), (107, 45), (106, 45), (105, 45), (104, 45), (103, 45), (102, 45), (101, 45), (100, 45), (99, 45),  (98, 45),  (97, 45),  (96, 45),  (95, 45),  (94, 45),  (94, 44),  (94, 43),  (94, 42),
        (93, 42),  (92, 42),  (91, 42),  (90, 42),  (89, 42),  (88, 42),  (87, 42),  (86, 42),  (85, 42),  (84, 42),  (83, 42),  (82, 42),  (81, 42),  (80, 42),  (80, 41),  (80, 40),  (80, 39),  (79, 39),  (78, 39),  (77, 39),  (76, 39),  (75, 39),  (75, 40),  (75, 41),  (74, 41),  (73, 41),  (72, 41),  (71, 41),  (70, 41),  (69, 41),  (69, 40),  (68, 40),  (68, 41),  (67, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (65, 41),  (64, 41),
        (63, 41),  (62, 41),  (62, 40),  (62, 39),  (62, 38),  (62, 37),  (62, 36),  (62, 35),  (62, 34),  (62, 33),  (62, 32),  (63, 32),  (64, 32),  (65, 32),  (66, 32),  (67, 32),  (67, 31),  (67, 30),  (67, 29),  (67, 28),  (67, 27),  (68, 27),  (68, 27),  (68, 27),  (68, 27),  (67, 27),  (67, 26),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 26),  (66, 26),  (65, 26),  (64, 26),  (64, 26),  (64, 26),  (64, 26),  (65, 26),  (66, 26),  (67, 26),
        (68, 26),  (68, 27),  (69, 27),  (70, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (70, 27),  (71, 27),  (71, 27),  (70, 27),  (69, 27),  (68, 27),  (67, 27),  (67, 28),  (67, 29),  (67, 30),  (67, 31),  (67, 32),  (66, 32),  (65, 32),  (64, 32),  (63, 32),  (62, 32),  (61, 32),  (60, 32),  (60, 31),  (60, 30),  (60, 29),  (59, 29),  (59, 30),  (58, 30),  (57, 30),  (56, 30),  (55, 30),  (55, 30),  (55, 30),  (55, 30),  (56, 30),  (57, 30),  (57, 29),  (57, 28),  (58, 28),  (59, 28),  (60, 28),

    ]);

    const string JsonWaypoints = @"[
    ""(60, 55, 191)"", ""(60, 56)"", ""(60, 57)"", ""(60, 58)"", ""(60, 59)"", ""(61, 59)"", ""(62, 59)"", ""(63, 59)"", ""(64, 59)"", ""(65, 59)"",
    ""(66, 59)"", ""(67, 59)"", ""(67, 58)"", ""(67, 57)"", ""(67, 56)"", ""(67, 55)"", ""(67, 54)"", ""(67, 53)"", ""(67, 52, 11)"", ""(67, 53)"",
    ""(68, 53)"", ""(69, 53)"", ""(70, 53)"", ""(70, 54)"", ""(71, 54, 11)"", ""(70, 54)"", ""(69, 54)"", ""(68, 54)"", ""(67, 54)"", ""(66, 54)"",
    ""(66, 56)"", ""(66, 57)"", ""(66, 58)"", ""(66, 59)"", ""(65, 59)"", ""(64, 59)"", ""(63, 59)"", ""(62, 59)"", ""(62, 60)"", ""(62, 61)"",
    ""(62, 62)"", ""(62, 63)"", ""(62, 64)"", ""(62, 65)"", ""(62, 66)"", ""(63, 66)"", ""(64, 66)"", ""(65, 66)"", ""(66, 66)"", ""(67, 66)"",
    ""(68, 66)"", ""(69, 66)"", ""(70, 66)"", ""(71, 66)"", ""(72, 66)"", ""(73, 66)"", ""(74, 66)"", ""(75, 66)"", ""(76, 66)"", ""(77, 66)"",
    ""(78, 66)"", ""(79, 66)"", ""(80, 66)"", ""(81, 66)"", ""(82, 66)"", ""(83, 66)"", ""(84, 66)"", ""(85, 66)"", ""(86, 66)"", ""(87, 66)"",
    ""(88, 66)"", ""(89, 66)"", ""(90, 66)"", ""(91, 66)"", ""(92, 66)"", ""(93, 66)"", ""(94, 66)"", ""(95, 66)"", ""(96, 66)"", ""(97, 66)"",
    ""(97, 65)"", ""(97, 64)"", ""(97, 63)"", ""(97, 62)"", ""(97, 61)"", ""(97, 60)"", ""(97, 59)"", ""(97, 58)"", ""(97, 57)"", ""(97, 56)"",
    ""(97, 55)"", ""(97, 54)"", ""(97, 53)"", ""(97, 52)"", ""(97, 51)"", ""(97, 50)"", ""(97, 49)"", ""(97, 48)"", ""(98, 48)"", ""(99, 48)"",
    ""(100, 48)"", ""(101, 48)"", ""(102, 48)"", ""(103, 48)"", ""(104, 48)"", ""(105, 48)"", ""(106, 48)"", ""(107, 48)"", ""(108, 48)"", ""(108, 49)"",
    ""(108, 50)"", ""(108, 51)"", ""(109, 51)"", ""(110, 51)"", ""(111, 51)"", ""(111, 52)"", ""(111, 53)"", ""(111, 54)"", ""(111, 55)"", ""(111, 56)"",
    ""(111, 57)"", ""(112, 57)"", ""(113, 58)"", ""(114, 59)"", ""(115, 59)"", ""(116, 59)"", ""(117, 59)"", ""(117, 58)"", ""(117, 57)"", ""(117, 56)"",
    ""(118, 56)"", ""(119, 56)"", ""(119, 57, 41)"", ""(119, 56, 11)"", ""(118, 56)"", ""(117, 56)"", ""(117, 57)"", ""(117, 58)"", ""(117, 59)"",
    ""(117, 60)"", ""(117, 61)"", ""(117, 62)"", ""(118, 62)"", ""(119, 62)"", ""(120, 62)"", ""(120, 63)"", ""(120, 62, 21)"", ""(119, 62)"",
    ""(118, 62)"", ""(117, 62)"", ""(116, 62)"", ""(115, 62)"", ""(114, 62)"", ""(113, 62)"", ""(112, 62)"", ""(112, 61)"", ""(112, 60)"", ""(112, 59)"",
    ""(113, 59)"", ""(114, 59)"", ""(115, 59)"", ""(116, 59)"", ""(117, 59)"", ""(118, 59)"", ""(118, 58)"", ""(117, 58)"", ""(117, 57)"", ""(117, 56)"",
    ""(118, 56)"", ""(119, 56)"", ""(119, 57, 31)"", ""(119, 56)"", ""(118, 56)"", ""(117, 56)"", ""(117, 57)"", ""(117, 58)"", ""(117, 59)"",
    ""(117, 60)"", ""(116, 60)"", ""(116, 59, 11)"", ""(117, 59)"", ""(117, 58)"", ""(117, 57)"", ""(117, 56, 21)"", ""(117, 57)"", ""(117, 58)"",
    ""(118, 58)"", ""(119, 58)"", ""(119, 59, 11)"", ""(118, 59)"", ""(117, 59)"", ""(116, 59)"", ""(116, 60)"", ""(116, 61)"", ""(117, 61)"",
    ""(118, 61, 11)"", ""(118, 62)"", ""(117, 62)"", ""(116, 62)"", ""(115, 62)"", ""(114, 62)"", ""(113, 62)"", ""(112, 62)"", ""(112, 63)"",
    ""(112, 64)"", ""(112, 65)"", ""(111, 65)"", ""(110, 65)"", ""(109, 65)"", ""(108, 65)"", ""(107, 65)"", ""(106, 65)"", ""(106, 64)"", ""(106, 63)"",
    ""(105, 63)"", ""(104, 63)"", ""(104, 62)"", ""(103, 62, 11)"", ""(104, 62)"", ""(104, 61)"", ""(104, 60)"", ""(104, 59)"", ""(103, 59)"",
    ""(103, 58)"", ""(103, 57)"", ""(103, 56)"", ""(103, 57)"", ""(103, 58)"", ""(103, 59)"", ""(104, 59)"", ""(105, 59)"", ""(106, 59)"", ""(107, 59)"",
    ""(108, 59)"", ""(109, 59)"", ""(110, 59)"", ""(111, 59)"", ""(112, 59)"", ""(113, 59)"", ""(114, 59)"", ""(115, 59)"", ""(116, 59)"", ""(117, 59)"",
    ""(117, 58)"", ""(117, 57)"", ""(117, 56)"", ""(118, 56)"", ""(119, 56)"", ""(119, 57, 21)"", ""(119, 56)"", ""(118, 56)"", ""(117, 56)"",
    ""(117, 57)"", ""(117, 58)"", ""(117, 59)"", ""(117, 60)"", ""(117, 61)"", ""(117, 62)"", ""(118, 62)"", ""(119, 62)"", ""(120, 62)"", ""(120, 63)"",
    ""(120, 62, 11)"", ""(119, 62)"", ""(118, 62)"", ""(117, 62)"", ""(117, 61)"", ""(118, 61, 12)"", ""(118, 60)"", ""(118, 59)"", ""(120, 59)"",
    ""(120, 58, 2)"", ""(119, 58)"", ""(118, 58)"", ""(117, 58)"", ""(117, 57)"", ""(117, 56)"", ""(118, 56)"", ""(119, 56)"", ""(119, 57, 21)"",
    ""(119, 56, 11)"", ""(119, 57)"", ""(119, 56)"", ""(118, 56)"", ""(117, 56)"", ""(117, 57)"", ""(117, 58)"", ""(117, 59)"", ""(117, 60)"",
    ""(117, 61)"", ""(117, 62)"", ""(117, 63, 2)"", ""(117, 62)"", ""(117, 61)"", ""(117, 60)"", ""(117, 59)"", ""(117, 58)"", ""(117, 57)"",
    ""(117, 56, 21)"", ""(119, 56)"", ""(119, 57, 21)"", ""(119, 56, 11)"", ""(118, 56)"", ""(117, 56)"", ""(117, 57)"", ""(117, 58)"", ""(117, 59)"",
    ""(117, 60)"", ""(116, 60)"", ""(115, 60)"", ""(114, 60)"", ""(113, 60)"", ""(112, 60)"", ""(111, 60)"", ""(110, 60)"", ""(109, 60)"", ""(108, 60)"",
    ""(107, 60)"", ""(106, 60)"", ""(105, 60)"", ""(105, 59, 11)"", ""(105, 60)"", ""(106, 60)"", ""(107, 60)"", ""(108, 60)"", ""(109, 60)"",
    ""(110, 60)"", ""(111, 60)"", ""(112, 60)"", ""(113, 60)"", ""(114, 60)"", ""(115, 60)"", ""(116, 60)"", ""(117, 60)"", ""(117, 59)"", ""(117, 58)"",
    ""(117, 57)"", ""(117, 56)"", ""(118, 56)"", ""(119, 56)"", ""(119, 57, 11)"", ""(119, 56)"", ""(118, 56)"", ""(117, 56)"", ""(117, 57)"",
    ""(117, 58)"", ""(117, 59)"", ""(117, 60)"", ""(117, 61)"", ""(116, 61)"", ""(115, 61)"", ""(114, 61)"", ""(113, 61)"", ""(112, 61)"", ""(112, 60)"",
    ""(112, 59)"", ""(112, 58)"", ""(112, 57)"", ""(112, 56)"", ""(111, 56)"", ""(111, 55)"", ""(111, 54)"", ""(111, 53)"", ""(111, 52)"", ""(111, 51)"",
    ""(111, 50)"", ""(111, 49)"", ""(111, 48)"", ""(111, 47)"", ""(111, 46)"", ""(111, 45)"", ""(111, 44)"", ""(110, 44)"", ""(109, 44)"", ""(108, 44)"",
    ""(107, 44)"", ""(106, 44)"", ""(105, 44)"", ""(104, 44)"", ""(103, 44)"", ""(102, 44)"", ""(101, 44)"", ""(100, 44)"", ""(99, 44)"", ""(98, 44)"",
    ""(97, 44)"", ""(97, 45)"", ""(97, 46)"", ""(97, 47)"", ""(97, 48)"", ""(97, 49)"", ""(97, 50)"", ""(97, 51)"", ""(97, 52)"", ""(97, 53)"",
    ""(97, 54)"", ""(97, 55)"", ""(97, 56)"", ""(97, 57)"", ""(96, 57)"", ""(95, 57)"", ""(95, 58)"", ""(95, 59)"", ""(95, 60)"", ""(95, 61)"",
    ""(95, 62)"", ""(95, 63)"", ""(95, 64)"", ""(95, 65)"", ""(94, 65)"", ""(93, 65)"", ""(92, 65)"", ""(91, 65)"", ""(90, 65)"", ""(89, 65)"",
    ""(88, 65)"", ""(87, 65)"", ""(86, 65)"", ""(86, 66)"", ""(85, 66)"", ""(84, 66)"", ""(83, 66)"", ""(82, 66)"", ""(81, 66)"", ""(80, 66)"",
    ""(79, 66)"", ""(78, 66)"", ""(77, 66)"", ""(76, 66)"", ""(75, 66)"", ""(74, 66)"", ""(73, 66)"", ""(72, 66)"", ""(71, 66)"", ""(70, 66)"",
    ""(69, 66)"", ""(68, 66)"", ""(67, 66)"", ""(66, 66)"", ""(65, 66)"", ""(64, 66)"", ""(63, 66)"", ""(62, 66)"", ""(62, 65)"", ""(62, 64)"",
    ""(62, 63)"", ""(62, 62)"", ""(62, 61)"", ""(62, 60)"", ""(62, 59)"", ""(61, 59)"", ""(60, 59)"", ""(59, 59)"", ""(58, 59, 12)"", ""(58, 58)"",
    ""(58, 57)"", ""(57, 57)"", ""(56, 57, 12)"", ""(58, 57)"", ""(58, 56)"", ""(57, 56)"", ""(57, 55)"", ""(56, 55)"", ""(55, 54)"", ""(55, 53, 11)"",
    ""(55, 54)"", ""(56, 54)"", ""(57, 54)"", ""(57, 55)"", ""(57, 56)"", ""(58, 56)"", ""(59, 56)"", ""(59, 57)"", ""(59, 58)"", ""(59, 59)"",
    ""(59, 60)"", ""(60, 60)"", ""(61, 60)"", ""(62, 60)"", ""(63, 60)"", ""(64, 60)"", ""(65, 60)"", ""(66, 60)"", ""(66, 59)"", ""(67, 59)"",
    ""(67, 58)"", ""(67, 57)"", ""(67, 56)"", ""(67, 55)"", ""(67, 54)"", ""(67, 53)"", ""(66, 53)"", ""(65, 53)"", ""(64, 53, 11)"", ""(65, 53)"",
    ""(66, 53)"", ""(67, 53)"", ""(67, 54)"", ""(67, 55)"", ""(67, 56)"", ""(67, 57)"", ""(67, 58)"", ""(67, 59)"", ""(67, 60)"", ""(68, 60)"",
    ""(69, 60)"", ""(70, 60, 11)"", ""(69, 60)"", ""(68, 60)"", ""(67, 60)"", ""(66, 60)"", ""(65, 60)"", ""(64, 60)"", ""(63, 60)"", ""(62, 60)"",
    ""(61, 60)"", ""(60, 60)"", ""(60, 59)"", ""(60, 58)"", ""(60, 57)"", ""(60, 56)"", ""(60, 55, 66)""
]";

    const string JsonWaypoints2 = @"[
    ""(12, 50)"", ""(12, 51)"", ""(12, 52)"", ""(12, 53)"", ""(12, 54)"", ""(12, 55)"", ""(12, 56)"", ""(12, 57)"", ""(12, 58)"", ""(12, 59)"",
    ""(12, 60)"", ""(12, 61)"", ""(12, 62)"", ""(12, 63)"", ""(12, 64)"", ""(12, 65)"", ""(12, 66)"", ""(12, 67)"", ""(255, 255, 162)"", ""(15, 66)"",
    ""(15, 65)"", ""(15, 64)"", ""(15, 63)"", ""(15, 62)"", ""(15, 61)"", ""(15, 60)"", ""(15, 59)"", ""(15, 58)"", ""(15, 57)"", ""(15, 56)"",
    ""(15, 55)"", ""(15, 54)"", ""(15, 53)"", ""(15, 52)"", ""(15, 51)"", ""(15, 50)"", ""(16, 50)"", ""(17, 50)"", ""(17, 49)"", ""(17, 48)"",
    ""(17, 47)"", ""(18, 47)"", ""(19, 47)"", ""(20, 47)"", ""(21, 47)"", ""(22, 47)"", ""(23, 47)"", ""(24, 47)"", ""(24, 46)"", ""(25, 46)"",
    ""(26, 46)"", ""(27, 46)"", ""(28, 46)"", ""(29, 46)"", ""(30, 46)"", ""(31, 46)"", ""(32, 46)"", ""(33, 46)"", ""(34, 46)"", ""(35, 46)"",
    ""(36, 46)"", ""(37, 46)"", ""(38, 46)"", ""(39, 46)"", ""(40, 46)"", ""(41, 46)"", ""(42, 46)"", ""(43, 46)"", ""(44, 46)"", ""(45, 46)"",
    ""(46, 46)"", ""(47, 46)"", ""(47, 47)"", ""(48, 47)"", ""(49, 47)"", ""(50, 47)"", ""(51, 47)"", ""(51, 46)"", ""(51, 45)"", ""(52, 45)"",
    ""(53, 45)"", ""(54, 45)"", ""(55, 45)"", ""(56, 45)"", ""(57, 45)"", ""(57, 46)"", ""(57, 47)"", ""(58, 47)"", ""(59, 47)"", ""(60, 47)"",
    ""(61, 47)"", ""(62, 47)"", ""(63, 47)"", ""(64, 47)"", ""(65, 47)"", ""(66, 47)"", ""(67, 47)"", ""(68, 47)"", ""(69, 47)"", ""(70, 47)"",
    ""(71, 47)"", ""(72, 47)"", ""(73, 47)"", ""(74, 47)"", ""(75, 47)"", ""(76, 47)"", ""(77, 47)"", ""(78, 47)"", ""(79, 47)"", ""(80, 47)"",
    ""(81, 47)"", ""(82, 47)"", ""(83, 47)"", ""(84, 47)"", ""(85, 47)"", ""(86, 47)"", ""(87, 47)"", ""(88, 47)"", ""(89, 47)"", ""(90, 47)"",
    ""(91, 47)"", ""(92, 47)"", ""(93, 47)"", ""(94, 47)"", ""(95, 47)"", ""(96, 47)"", ""(97, 47)"", ""(98, 47)"", ""(99, 47)"", ""(100, 47)"",
    ""(101, 47)"", ""(101, 46)"", ""(101, 45)"", ""(102, 45)"", ""(103, 45)"", ""(104, 45)"", ""(105, 45)"", ""(106, 45)"", ""(107, 45)"", ""(108, 45)"",
    ""(109, 45)"", ""(109, 44)"", ""(109, 43)"", ""(109, 42)"", ""(109, 41)"", ""(109, 40)"", ""(109, 39)"", ""(109, 38)"", ""(110, 38)"", ""(111, 38)"",
    ""(112, 38)"", ""(113, 38)"", ""(114, 38)"", ""(115, 38)"", ""(116, 38)"", ""(117, 38)"", ""(118, 38)"", ""(118, 37)"", ""(118, 36)"", ""(118, 35)"",
    ""(118, 34)"", ""(118, 33)"", ""(118, 32)"", ""(118, 31)"", ""(118, 30)"", ""(118, 29)"", ""(118, 28)"", ""(119, 28)"", ""(120, 28)"", ""(121, 28)"",
    ""(121, 27)"", ""(121, 26)"", ""(121, 25)"", ""(121, 24)"", ""(121, 23)"", ""(121, 22)"", ""(121, 21)"", ""(121, 20)"", ""(121, 19, 11)"", ""(121, 20)"",
    ""(121, 21)"", ""(121, 22)"", ""(121, 23)"", ""(121, 24)"", ""(121, 25)"", ""(121, 26)"", ""(121, 27)"", ""(121, 28)"", ""(121, 29)"", ""(122, 29)"",
    ""(123, 29)"", ""(124, 29)"", ""(125, 29, 11)"", ""(125, 30)"", ""(125, 31)"", ""(126, 31)"", ""(125, 31)"", ""(124, 31)"", ""(124, 30)"", ""(123, 30)"",
    ""(122, 30)"", ""(121, 30)"", ""(120, 30)"", ""(119, 30)"", ""(119, 31)"", ""(119, 32)"", ""(119, 33)"", ""(118, 33)"", ""(118, 34)"", ""(118, 35)"",
    ""(118, 36)"", ""(118, 37)"", ""(118, 38)"", ""(118, 39)"", ""(117, 39)"", ""(116, 39)"", ""(115, 39)"", ""(114, 39)"", ""(113, 39)"", ""(112, 39)"",
    ""(112, 38)"", ""(111, 38)"", ""(110, 38)"", ""(110, 39)"", ""(110, 40)"", ""(110, 41)"", ""(110, 42)"", ""(110, 43)"", ""(110, 44)"", ""(110, 45)"",
    ""(109, 45)"", ""(108, 45)"", ""(107, 45)"", ""(106, 45)"", ""(105, 45)"", ""(104, 45)"", ""(103, 45)"", ""(103, 46)"", ""(103, 47)"", ""(103, 48)"",
    ""(104, 48)"", ""(105, 48)"", ""(106, 48)"", ""(107, 48)"", ""(107, 49)"", ""(107, 50)"", ""(107, 51)"", ""(108, 51)"", ""(109, 51)"", ""(110, 51)"",
    ""(110, 52)"", ""(110, 53)"", ""(110, 54)"", ""(110, 55)"", ""(110, 56)"", ""(110, 57)"", ""(110, 58)"", ""(110, 57)"", ""(110, 56)"", ""(110, 55)"",
    ""(110, 54)"", ""(110, 53)"", ""(110, 52)"", ""(110, 51)"", ""(109, 51)"", ""(108, 51)"", ""(107, 51)"", ""(107, 50)"", ""(107, 49)"", ""(106, 49)"",
    ""(105, 49)"", ""(105, 48)"", ""(104, 48)"", ""(103, 48)"", ""(102, 48)"", ""(101, 48)"", ""(100, 48)"", ""(99, 48)"", ""(98, 48)"", ""(97, 48)"",
    ""(96, 48)"", ""(96, 49)"", ""(96, 50)"", ""(96, 51)"", ""(96, 52)"", ""(96, 53)"", ""(96, 54)"", ""(96, 55)"", ""(96, 56)"", ""(96, 57)"",
    ""(96, 58)"", ""(96, 59)"", ""(96, 60)"", ""(96, 61)"", ""(96, 62)"", ""(96, 63)"", ""(96, 64)"", ""(96, 65)"", ""(96, 66)"", ""(95, 66)"",
    ""(94, 66)"", ""(93, 66)"", ""(92, 66)"", ""(91, 66)"", ""(90, 66)"", ""(89, 66)"", ""(88, 66)"", ""(87, 66)"", ""(86, 66)"", ""(85, 66)"",
    ""(84, 66)"", ""(83, 66)"", ""(82, 66)"", ""(81, 66)"", ""(80, 66)"", ""(79, 66)"", ""(78, 66)"", ""(77, 66)"", ""(76, 66)"", ""(75, 66)"",
    ""(74, 66)"", ""(73, 66)"", ""(72, 66)"", ""(71, 66)"", ""(70, 66)"", ""(69, 66)"", ""(68, 66)"", ""(67, 66)"", ""(66, 66)"", ""(65, 66)"",
    ""(64, 66)"", ""(63, 66)"", ""(62, 66)"", ""(61, 66)"", ""(60, 66)"", ""(59, 66)"", ""(58, 66)"", ""(57, 66)"", ""(56, 66)"", ""(55, 66)"",
    ""(54, 66)"", ""(53, 66)"", ""(52, 66)"", ""(51, 66)"", ""(50, 66)"", ""(49, 66)"", ""(48, 66)"", ""(47, 66)"", ""(46, 66)"", ""(45, 66)"",
    ""(44, 66)"", ""(43, 66)"", ""(42, 66)"", ""(41, 66)"", ""(40, 66)"", ""(39, 66)"", ""(38, 66)"", ""(37, 66)"", ""(36, 66)"", ""(35, 66)"",
    ""(34, 66)"", ""(33, 66)"", ""(32, 66)"", ""(31, 66)"", ""(30, 66)"", ""(29, 66)"", ""(29, 65)"", ""(29, 64)"", ""(29, 63)"", ""(29, 62)"",
    ""(29, 61)"", ""(29, 60)"", ""(29, 59)"", ""(29, 58)"", ""(29, 57)"", ""(29, 56)"", ""(29, 55)"", ""(29, 54)"", ""(29, 53)"", ""(29, 52)"",
    ""(29, 51)"", ""(29, 50)"", ""(29, 49)"", ""(29, 48)"", ""(28, 48)"", ""(27, 48)"", ""(26, 48)"", ""(25, 48)"", ""(24, 48)"", ""(23, 48)"",
    ""(22, 48)"", ""(21, 48)"", ""(20, 48)"", ""(19, 48)"", ""(18, 48)"", ""(17, 48)"", ""(16, 48)"", ""(15, 48)"", ""(15, 47)"", ""(14, 47)"",
    ""(13, 47)"", ""(12, 47)"", ""(11, 47)"", ""(10, 47)"", ""(9, 47)"", ""(8, 47)"", ""(8, 46)"", ""(8, 45)"", ""(8, 44)"", ""(8, 43)"",
    ""(7, 43)"", ""(6, 43)"", ""(5, 43)"", ""(4, 43)"", ""(3, 43)"", ""(2, 43)"", ""(1, 43)"", ""(255, 255, 80)"", ""(2, 43)"", ""(3, 43)"",
    ""(4, 43)"", ""(5, 43)"", ""(6, 43)"", ""(7, 43)"", ""(8, 43)"", ""(9, 43)"", ""(10, 43)"", ""(11, 43)"", ""(12, 43)"", ""(13, 43)"",
    ""(14, 43)"", ""(15, 43)"", ""(16, 43)"", ""(17, 43)"", ""(18, 43)"", ""(19, 43)"", ""(19, 42)"", ""(19, 41)"", ""(20, 41)"", ""(21, 41)"",
    ""(22, 41)"", ""(23, 41)"", ""(24, 41)"", ""(25, 41)"", ""(26, 41)"", ""(27, 41)"", ""(28, 41)"", ""(29, 41)"", ""(30, 41)"", ""(31, 41)"",
    ""(31, 40)"", ""(31, 39)"", ""(31, 38)"", ""(32, 38)"", ""(33, 38)"", ""(34, 38)"", ""(35, 38)"", ""(36, 38)"", ""(37, 38)"", ""(38, 38)"",
    ""(38, 39)"", ""(39, 39)"", ""(40, 39)"", ""(41, 39)"", ""(42, 39)"", ""(43, 39)"", ""(44, 39)"", ""(45, 39)"", ""(46, 39)"", ""(47, 39)"",
    ""(48, 39)"", ""(49, 39)"", ""(50, 39)"", ""(51, 39)"", ""(51, 40)"", ""(51, 41)"", ""(52, 41)"", ""(53, 41)"", ""(54, 41)"", ""(55, 41)"",
    ""(56, 41)"", ""(57, 41)"", ""(57, 40)"", ""(57, 39)"", ""(58, 39)"", ""(59, 39)"", ""(60, 39)"", ""(61, 39)"", ""(62, 39)"", ""(63, 39)"",
    ""(64, 39)"", ""(65, 39)"", ""(66, 39)"", ""(67, 39)"", ""(68, 39)"", ""(69, 39)"", ""(70, 39)"", ""(70, 40)"", ""(70, 41)"", ""(71, 41)"",
    ""(72, 41)"", ""(73, 41)"", ""(74, 41)"", ""(75, 41)"", ""(76, 41)"", ""(77, 41)"", ""(78, 41)"", ""(79, 41)"", ""(80, 41)"", ""(81, 41)"",
    ""(82, 41)"", ""(83, 41)"", ""(84, 41)"", ""(85, 41)"", ""(86, 41)"", ""(87, 41)"", ""(88, 41)"", ""(88, 42)"", ""(89, 42)"", ""(90, 42)"",
    ""(91, 42)"", ""(92, 42)"", ""(93, 42)"", ""(94, 42)"", ""(95, 42)"", ""(96, 42)"", ""(97, 42)"", ""(98, 42)"", ""(99, 42)"", ""(100, 42)"",
    ""(101, 42)"", ""(102, 42)"", ""(102, 43)"", ""(103, 43)"", ""(104, 43)"", ""(105, 43)"", ""(105, 44)"", ""(106, 44)"", ""(107, 44)"", ""(108, 44)"",
    ""(109, 44)"", ""(110, 44)"", ""(111, 44)"", ""(112, 44)"", ""(113, 44)"", ""(113, 45)"", ""(114, 45)"", ""(115, 45)"", ""(116, 45)"", ""(117, 45)"",
    ""(118, 45)"", ""(119, 45)"", ""(120, 45)"", ""(121, 45)"", ""(121, 46)"", ""(121, 47)"", ""(121, 48)"", ""(122, 48)"", ""(123, 48)"", ""(124, 48)"",
    ""(125, 48)"", ""(126, 48)"", ""(127, 48)"", ""(128, 48)"", ""(129, 48)"", ""(130, 48)"", ""(131, 48)"", ""(132, 48)"", ""(132, 49)"", ""(132, 50)"",
    ""(132, 51)"", ""(132, 52)"", ""(132, 53)"", ""(132, 54)"", ""(132, 55)"", ""(132, 56)"", ""(132, 57)"", ""(132, 58)"", ""(132, 59)"", ""(132, 60, 4)"",
    ""(132, 59)"", ""(132, 58)"", ""(132, 57)"", ""(132, 56)"", ""(132, 55)"", ""(132, 54)"", ""(132, 53)"", ""(132, 52)"", ""(132, 51)"", ""(132, 50)"",
    ""(132, 49)"", ""(131, 49)"", ""(130, 49)"", ""(129, 49)"", ""(128, 49)"", ""(127, 49)"", ""(127, 48)"", ""(126, 48)"", ""(125, 48)"", ""(124, 48)"",
    ""(123, 48)"", ""(122, 48)"", ""(121, 48)"", ""(120, 48)"", ""(119, 48)"", ""(118, 48)"", ""(117, 48)"", ""(116, 48)"", ""(115, 48)"", ""(114, 48)"",
    ""(114, 47)"", ""(114, 46)"", ""(114, 45)"", ""(114, 44)"", ""(113, 44)"", ""(112, 44)"", ""(111, 44)"", ""(110, 44)"", ""(109, 44)"", ""(108, 44)"",
    ""(107, 44)"", ""(106, 44)"", ""(105, 44)"", ""(104, 44)"", ""(103, 44)"", ""(102, 44)"", ""(101, 44)"", ""(101, 43)"", ""(101, 42)"", ""(101, 41)"",
    ""(101, 40)"", ""(101, 39)"", ""(101, 38)"", ""(100, 38)"", ""(99, 38)"", ""(98, 38)"", ""(97, 38)"", ""(96, 38)"", ""(95, 38)"", ""(95, 37)"",
    ""(95, 36)"", ""(95, 35)"", ""(95, 34)"", ""(95, 33)"", ""(95, 32)"", ""(95, 31)"", ""(95, 30)"", ""(95, 29)"", ""(95, 28)"", ""(95, 27)"",
    ""(95, 26)"", ""(95, 25)"", ""(95, 24)"", ""(95, 23)"", ""(95, 22)"", ""(95, 21)"", ""(94, 21)"", ""(93, 21)"", ""(92, 21)"", ""(91, 21)"",
    ""(90, 21)"", ""(90, 20)"", ""(89, 20)"", ""(88, 20)"", ""(87, 20)"", ""(86, 20)"", ""(85, 20)"", ""(84, 20)"", ""(83, 20)"", ""(82, 20)"",
    ""(81, 20)"", ""(80, 20)"", ""(79, 20)"", ""(78, 20)"", ""(77, 20)"", ""(76, 20)"", ""(75, 20)"", ""(74, 20)"", ""(73, 20)"", ""(72, 20)"",
    ""(71, 20)"", ""(70, 20)"", ""(69, 20)"", ""(68, 20)"", ""(67, 20)"", ""(66, 20)"", ""(65, 20)"", ""(64, 20)"", ""(63, 20)"", ""(62, 20)"",
    ""(61, 20)"", ""(60, 20)"", ""(59, 20)"", ""(58, 20)"", ""(57, 20)"", ""(56, 20)"", ""(55, 20)"", ""(54, 20)"", ""(53, 20)"", ""(52, 20)"",
    ""(51, 20)"", ""(50, 20)"", ""(49, 20)"", ""(48, 20)"", ""(47, 20)"", ""(46, 20)"", ""(45, 20)"", ""(44, 20)"", ""(43, 20)"", ""(42, 20)"",
    ""(41, 20)"", ""(40, 20)"", ""(39, 20)"", ""(38, 20)"", ""(37, 20)"", ""(36, 20)"", ""(35, 20)"", ""(34, 20)"", ""(33, 20)"", ""(32, 20)"",
    ""(31, 21, 2)"", ""(31, 22)"", ""(31, 23)"", ""(31, 24)"", ""(30, 25)"", ""(30, 26)"", ""(30, 27)"", ""(30, 28)"", ""(30, 29)"", ""(30, 30)"",
    ""(30, 31)"", ""(30, 32)"", ""(30, 33)"", ""(29, 34)"", ""(29, 35)"", ""(29, 36)"", ""(29, 37)"", ""(29, 38)"", ""(29, 39)"", ""(29, 40)"",
    ""(28, 40)"", ""(27, 40)"", ""(26, 40)"", ""(25, 40)"", ""(24, 40)"", ""(23, 40)"", ""(22, 40)"", ""(21, 40)"", ""(20, 40)"", ""(19, 40)"",
    ""(18, 40)"", ""(17, 40)"", ""(16, 40)"", ""(15, 40)"", ""(14, 40)"", ""(13, 40)"", ""(12, 40)"", ""(11, 40)"", ""(10, 40)"", ""(9, 40)"",
    ""(8, 40)"", ""(8, 41)"", ""(8, 42)"", ""(8, 43)"", ""(7, 43)"", ""(6, 43)"", ""(5, 43)"", ""(4, 43)"", ""(3, 43)"", ""(2, 43)"",
    ""(1, 43)"", ""(255, 255, 100)"", ""(2, 43)"", ""(3, 43)"", ""(4, 43)"", ""(5, 43)"", ""(6, 43)"", ""(7, 43)"", ""(8, 43)"", ""(9, 43)"",
    ""(9, 44)"", ""(9, 45)"", ""(9, 46)"", ""(9, 47)"", ""(10, 47)"", ""(11, 47)"", ""(12, 47)"", ""(12, 48)"", ""(12, 49)""
]";

    static NpcWaypoint[] ToWaypoints((int x, int y)[] points) => points.Select(x => new NpcWaypoint((byte)x.Item1, (byte)x.Item2)).ToArray();
    [Fact] public void RoundTripTest() => RoundTrip(TestWaypoints1);
    [Fact]
    public void JsonRoundTripTest()
    {
        var jsonUtil = new FormatJsonUtil();
        var fromJson = jsonUtil.Deserialize<NpcWaypoint[]>(JsonWaypoints);
        RoundTrip(fromJson);
    }

    [Fact]
    public void JsonRoundTripTest2()
    {
        var jsonUtil = new FormatJsonUtil();
        var fromJson = jsonUtil.Deserialize<NpcWaypoint[]>(JsonWaypoints2);
        RoundTrip(fromJson);
    }

    [Fact]
    public void SinglePoint()
    {
        var path = ToWaypoints([(0, 0)]);
        var waypoints = NpcPathBuilder.IdentifyWaypoints(path).ToList();
        Assert.NotNull(waypoints);
        Assert.Collection(waypoints, i => Assert.Equal((0, true), i));

        var combined = NpcPathBuilder.CombineRuns(path).ToList();
        Assert.NotNull(combined);
        Assert.Collection(combined, x => Assert.Equal((0, 0, 0), x));

        RoundTrip(path);
    }

    [Fact]
    public void Waiting()
    {
        var path = ToWaypoints([
            (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
            (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
            (0, 0)
        ]);

        var waypoints = NpcPathBuilder.IdentifyWaypoints(path).ToList();
        Assert.NotNull(waypoints);
        Assert.Collection(waypoints,
            i => Assert.Equal((0, true), i),
            i => Assert.Equal((10, true), i)
        );

        var combined = NpcPathBuilder.CombineRuns(path).ToList();
        Assert.NotNull(combined);
        Assert.Collection(combined,
            x => Assert.Equal((0, 0, 0), x),
            x => Assert.Equal((10, 0, 0), x));

        RoundTrip(path);
    }

    [Fact]
    public void Horizontal()
    {
        var path = ToWaypoints([
            (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)
        ]);

        var waypoints = NpcPathBuilder.IdentifyWaypoints(path).ToList();
        Assert.NotNull(waypoints);
        Assert.Collection(waypoints,
            i => Assert.Equal((0, true), i),
            i => Assert.Equal((6, true), i)
        );

        var combined = NpcPathBuilder.CombineRuns(path).ToList();
        Assert.NotNull(combined);
        Assert.Collection(combined,
            x => Assert.Equal((0, 0, 0), x),
            x => Assert.Equal((6, 6, 0), x));

        RoundTrip(path);
    }

    [Fact]
    public void Corner()
    {
        var path = ToWaypoints([
            (0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (3, 2), (3, 3)
        ]);

        var waypoints = NpcPathBuilder.IdentifyWaypoints(path).ToList();
        Assert.NotNull(waypoints);
        Assert.Collection(waypoints,
            i => Assert.Equal((0, true), i),
            i => Assert.Equal((3, false), i),
            i => Assert.Equal((6, true), i)
        );

        var combined = NpcPathBuilder.CombineRuns(path).ToList();
        Assert.NotNull(combined);
        Assert.Collection(combined,
            x => Assert.Equal((0, 0, 0), x),
            x => Assert.Equal((3, 3, 0), x),
            x => Assert.Equal((6, 3, 3), x));

        RoundTrip(path);
    }

    [Fact]
    public void CornerWithWait()
    {
        var path = ToWaypoints([
            (0, 0), // 0*
            (1, 0), // 1
            (2, 0), // 2
            (3, 0), // 3*
            (3, 0), // 4
            (3, 0), // 5
            (3, 0), // 6
            (3, 1), // 7
            (3, 2), // 8
            (3, 3)  // 9*
        ]);

        var waypoints = NpcPathBuilder.IdentifyWaypoints(path).ToList();
        Assert.NotNull(waypoints);
        Assert.Collection(waypoints,
            i => Assert.Equal((0, true), i),
            i => Assert.Equal((3, false), i),
            i => Assert.Equal((6, false), i),
            i => Assert.Equal((9, true), i)
        );

        var combined = NpcPathBuilder.CombineRuns(path).ToList();
        Assert.NotNull(combined);
        Assert.Collection(combined,
            x => Assert.Equal((0, 0, 0), x),
            x => Assert.Equal((3, 3, 0), x),
            x => Assert.Equal((9, 3, 3), x));

        RoundTrip(path);
    }

    [Fact]
    public void Zigzag()
    {
        var path = ToWaypoints([
            (0, 0), (1, 0), (1, 1), (2, 1), (2, 2), (3, 2), (3, 3)
        ]);

        var waypoints = NpcPathBuilder.IdentifyWaypoints(path).ToList();
        Assert.NotNull(waypoints);
        Assert.Collection(waypoints,
            i => Assert.Equal((0, true), i),
            i => Assert.Equal((1, false), i),
            i => Assert.Equal((2, false), i),
            i => Assert.Equal((3, false), i),
            i => Assert.Equal((4, false), i),
            i => Assert.Equal((5, false), i),
            i => Assert.Equal((6, true), i)
        );

        var combined = NpcPathBuilder.CombineRuns(path).ToList();
        Assert.NotNull(combined);
        Assert.Collection(combined,
            x => Assert.Equal((0, 0, 0), x),
            x => Assert.Equal((1, 1, 0), x),
            x => Assert.Equal((2, 1, 1), x),
            x => Assert.Equal((3, 2, 1), x),
            x => Assert.Equal((4, 2, 2), x),
            x => Assert.Equal((5, 3, 2), x),
            x => Assert.Equal((6, 3, 3), x));

        RoundTrip(path);
    }

    [Fact]
    public void DiscontinuityTest()
    {
        var path = ToWaypoints([
            (70, 54), (69, 54), (68, 54), (67, 54), (66, 54),
            // (66,55) missing
            (66, 56), (66, 57), (66, 58)
        ]);

        RoundTrip(path);
    }

    [Fact]
    public void DiscontinuityTest2()
    {
        var path = ToWaypoints([
            (117, 56),
            (117, 56),
            (119, 56),
            (119, 57),
            (119, 57),
            (119, 57)
        ]);
        RoundTrip(path);
    }

    [Fact]
    public void DiscontinuityTest3()
    {
        var path = ToWaypoints([
            (165, 29), // 0 X
            (164, 29),
            (163, 29),
            (162, 29),
            (161, 29), // 4 X
            (160, 30), //
            (159, 31), // 6 X
            (157, 31), // 7 X
            (155, 31), // 8 X
            (155, 30), // 9 X
            (154, 30),
            (153, 30),
            (152, 30),
            (151, 30),
            (150, 30),
            (149, 30),
            (148, 30),
            (147, 30) // 17 X
        ]);

        var waypoints = NpcPathBuilder.IdentifyWaypoints(path).ToList();
        Assert.NotNull(waypoints);
        Assert.Collection(waypoints,
            i => Assert.Equal((0, true), i),
            i => Assert.Equal((4, false), i),
            i => Assert.Equal((6, true), i),
            i => Assert.Equal((7, true), i),
            i => Assert.Equal((8, true), i),
            i => Assert.Equal((9, false), i),
            i => Assert.Equal((17, true), i)
        );
        RoundTrip(path);
    }

    static void RoundTrip(NpcWaypoint[] path)
    {
        const int tileWidth = 16;
        const int tileHeight = 16;

        int nextId = 0;
        var mapObjects = NpcPathBuilder.Build(0, path, tileWidth, tileHeight, ref nextId);
        var parser = NpcPathBuilder.BuildParser(mapObjects, tileWidth, tileHeight);
        var reconstructed = parser.GetWaypoints(0, path.Length);
        Assert.Equal(path.Length, reconstructed.Length);
        for (int i = 0; i < path.Length; i++)
            Assert.Equal(path[i], reconstructed[i]);
    }
}